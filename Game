public class Spot { 

    private Piece piece; 

    private int x; 

    private int y; 

  

    public Spot(int x, int y, Piece piece) 

    { 

        this.setPiece(piece); 

        this.setX(x); 

        this.setY(y); 

    } 

  

    public Piece getPiece() 

    { 

        return this.piece; 

    } 

  

    public void setPiece(Piece p) 

    { 

        this.piece = p; 

    } 

  

    public int getX() 

    { 

        return this.x; 

    } 

  

    public void setX(int x) 

    { 

        this.x = x; 

    } 

  

    public int getY() 

    { 

        return this.y; 

    } 

  

    public void setY(int y) 

    { 

        this.y = y; 

    } 
} 
Piece: An abstract class to represent common functionality of all chess pieces:


public abstract class Piece { 

  

    private boolean killed = false; 

    private boolean white = false; 

  

    public Piece(boolean white) 

    { 

        this.setWhite(white); 

    } 

  

    public boolean isWhite() 

    { 

        return this.white == true; 

    } 

  

    public void setWhite(boolean white) 

    { 

        this.white = white; 

    } 

  

    public boolean isKilled() 

    { 

        return this.killed == true; 

    } 

  

    public void setKilled(boolean killed) 

    { 

        this.killed = killed; 

    } 

  

    public abstract boolean canMove(Board board,  

                                 Spot start, Spot end); 
} 
King: To represent King as a chess piece:


public class King extends Piece { 

    private boolean castlingDone = false; 

  

    public King(boolean white) 

    { 

        super(white); 

    } 

  

    public boolean isCastlingDone() 

    { 

        return this.castlingDone == true; 

    } 

  

    public void setCastlingDone(boolean castlingDone) 

    { 

        this.castlingDone = castlingDone; 

    } 

  

    @Override

    public boolean canMove(Board board, Spot start, Spot end) 

    { 

        // we can't move the piece to a Spot that  

        // has a piece of the same color 

        if (end.getPiece().isWhite() == this.isWhite()) { 

            return false; 

        } 

  

        int x = Math.abs(start.getX() - end.getX()); 

        int y = Math.abs(start.getY() - end.getY()); 

        if (x + y == 1) { 

            // check if this move will not result in the king 

            // being attacked if so return true 

            return true; 

        } 

  

        return this.isValidCastling(board, start, end); 

    } 

  

    private boolean isValidCastling(Board board,  

                                     Spot start, Spot end) 

    { 

  

        if (this.isCastlingDone()) { 

            return false; 

        } 

  

        // Logic for returning true or false 

    } 

  

    public boolean isCastlingMove(Spot start, Spot end) 

    { 

        // check if the starting and  

        // ending position are correct 

    } 
} 
Knight: To represent Knight as a chess piece


public class Knight extends Piece { 

    public Knight(boolean white) 

    { 

        super(white); 

    } 

  

    @Override

    public boolean canMove(Board board, Spot start,  

                                            Spot end) 

    { 

        // we can't move the piece to a spot that has 

        // a piece of th
